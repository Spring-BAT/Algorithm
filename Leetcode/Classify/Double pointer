1、长度最小的子数组
给定一个含有 n 个正整数的数组和一个正整数 s ，找出该数组中满足其和 ≥ s 的长度最小的连续子数组，并返回其长度。如果不存在符合条件的连续子数组，返回 0。
示例：

输入：s = 7, nums = [2,3,1,2,4,3]
输出：2
解释：子数组 [4,3] 是该条件下的长度最小的连续子数组。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/minimum-size-subarray-sum

class Solution{
    public int  minSubArrayLen(int s,int[] nums){
          int n = nums.length;
          int sum = 0;
          int start = 0,end = 0;
          int ans = Integer.MAX_VALUE;
          while(end < n){
              sum += nums[end];
              while(sum >= s){
                  ans = Math.min(ans,end-start+1);
                  sum -= nums[start];
                  start++;
              }
              end++;
          }
          if(ans == Integer.MAX_VALUE)    return 0;
          return ans;
    }
}

2、最长不含重复字符的子字符串（双指针 （滑动窗口）（哈希表））

请从字符串中找出一个最长的不包含重复字符的子字符串，计算该最长子字符串的长度。

示例 1:

输入: "abcabcbb"
输出: 3 
解释: 因为无重复字符的最长子串是 "abc"，所以其长度为 3。
示例 2:

输入: "bbbbb"
输出: 1
解释: 因为无重复字符的最长子串是 "b"，所以其长度为 1。
示例 3:

输入: "pwwkew"
输出: 3
解释: 因为无重复字符的最长子串是 "wke"，所以其长度为 3。
     请注意，你的答案必须是 子串 的长度，"pwke" 是一个子序列，不是子串。
 

提示：

s.length <= 40000

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/zui-chang-bu-han-zhong-fu-zi-fu-de-zi-zi-fu-chuan-lcof

class Solution {
    public int lengthOfLongestSubstring(String s) {
        Map<Character,Integer> dic = new HashMap<>();
        int i = -1,res = 0;
        for(int j = 0;j<s.length();j++){
            if(dic.containsKey(s.charAt(j)))
                i = Math.max(i,dic.get(s.charAt(j))); //更新左指针 i
            dic.put(s.charAt(j),j);  // 哈希表记录
            res = Math.max(res,j-i); // 更新结果
        }
        return res;
    }
}

3、移除元素
给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。

不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。

元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。

 

示例 1:

给定 nums = [3,2,2,3], val = 3,

函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。

你不需要考虑数组中超出新长度后面的元素。
示例 2:

给定 nums = [0,1,2,2,3,0,4,2], val = 2,

函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。

注意这五个元素可为任意顺序。

你不需要考虑数组中超出新长度后面的元素。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/remove-element

class Solution {
    /*快慢指针 i慢指针，j是快指针，if j所指的值与val不等，将j所指的值赋给nums[i],i++,否则j跳过val往后遍历*/
    public int removeElement(int[] nums, int val) {
        int i = 0;
        for(int j=0;j<nums.length;j++){
            if(nums[j]!=val){
                nums[i] = nums[j];
                i++;
            }
        }
        return i;
    }
}

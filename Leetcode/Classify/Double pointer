长度最小的子数组
给定一个含有 n 个正整数的数组和一个正整数 s ，找出该数组中满足其和 ≥ s 的长度最小的连续子数组，并返回其长度。如果不存在符合条件的连续子数组，返回 0。
示例：

输入：s = 7, nums = [2,3,1,2,4,3]
输出：2
解释：子数组 [4,3] 是该条件下的长度最小的连续子数组。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/minimum-size-subarray-sum

class Solution{
    public int  minSubArrayLen(int s,int[] nums){
          int n = nums.length;
          int sum = 0;
          int start = 0,end = 0;
          int ans = Integer.MAX_VALUE;
          while(end < n){
              sum += nums[end];
              while(sum >= s){
                  ans = Math.min(ans,end-start+1);
                  sum -= nums[start];
                  start++;
              }
              end++;
          }
          if(ans == Integer.MAX_VALUE)    return 0;
          return ans;
    }
}

2、最长不含重复字符的子字符串（双指针 （滑动窗口）（哈希表））

请从字符串中找出一个最长的不包含重复字符的子字符串，计算该最长子字符串的长度。

示例 1:

输入: "abcabcbb"
输出: 3 
解释: 因为无重复字符的最长子串是 "abc"，所以其长度为 3。
示例 2:

输入: "bbbbb"
输出: 1
解释: 因为无重复字符的最长子串是 "b"，所以其长度为 1。
示例 3:

输入: "pwwkew"
输出: 3
解释: 因为无重复字符的最长子串是 "wke"，所以其长度为 3。
     请注意，你的答案必须是 子串 的长度，"pwke" 是一个子序列，不是子串。
 

提示：

s.length <= 40000

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/zui-chang-bu-han-zhong-fu-zi-fu-de-zi-zi-fu-chuan-lcof

class Solution {
    public int lengthOfLongestSubstring(String s) {
        Map<Character,Integer> dic = new HashMap<>();
        int i = -1,res = 0;
        for(int j = 0;j<s.length();j++){
            if(dic.containsKey(s.charAt(j)))
                i = Math.max(i,dic.get(s.charAt(j))); //更新左指针 i
            dic.put(s.charAt(j),j);  // 哈希表记录
            res = Math.max(res,j-i); // 更新结果
        }
        return res;
    }
}
